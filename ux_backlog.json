{
  "project": "blueprintsCLI UI/UX Enhancement",
  "epics": [
    {
      "id": "EPIC-1",
      "title": "UI Enhancement with TTY-Box",
      "description": "Improve the visual presentation and structure of the CLI by replacing manual text-based separators with TTY-Box frames for a more professional and consistent user interface.",
      "tasks": [
        {
          "id": "TASK-1.1",
          "title": "Implement Main Application Banner in MenuCommand",
          "description": "Create a visually appealing banner for the main menu to give the application a distinct and professional entry point.",
          "llm_prompt": {
            "role": "SYSTEM",
            "instructions": "You are an expert Ruby developer specializing in terminal applications. Your task is to modify the `blueprintsCLI` codebase to enhance its user interface. You will be given a specific file and instructions to implement a feature using the `tty-box` gem.",
            "task_details": {
              "file_to_modify": "lib/blueprintsCLI/commands/menu_command.rb",
              "goal": "Replace the simple text title in the `main_menu` method with a framed banner using `TTY::Box.frame`.",
              "context_code": "def main_menu\n  debug_log(\"Building main menu with commands: #{@commands.map { |cmd| cmd[:name] }}\")\n\n  result = @prompt.select(\"üöÄ BlueprintsCLI - Select a command:\".colorize(:cyan)) do |menu|\n    @commands.each do |cmd|\n      debug_log(\"Adding menu choice: '#{cmd[:name].capitalize} - #{cmd[:description]}' -> #{cmd[:name].inspect}\")\n      menu.choice \"#{cmd[:name].capitalize} - #{cmd[:description]}\", cmd[:name]\n    end\n    menu.choice \"Exit\", :exit\n  end\n\n  debug_log(\"Menu selection returned: #{result.inspect}\")\n  result\nend",
              "instructions": [
                "1. In the `main_menu` method, before the `@prompt.select` call, create a `TTY::Box` frame.",
                "2. The box should contain the title 'üöÄ BlueprintsCLI üöÄ' and a subtitle like 'Your Blueprint Management Hub'.",
                "3. Use options like `padding: 1`, `align: :center`, and `title: { top_left: 'v1.0' }` to style the box.",
                "4. Print the generated box to the console.",
                "5. Modify the `@prompt.select` question to be a simpler 'Select a command:' since the title is now in the banner.",
                "6. Ensure the rest of the method's logic remains unchanged."
              ],
              "desired_output_example": "A centered, framed box should appear above the menu prompt, clearly branding the application each time the main menu is displayed."
            }
          }
        },
        {
          "id": "TASK-1.2",
          "title": "Refactor Headers and Tables in List and Search Actions",
          "description": "Replace manual line separators (`=` and `-`) in the `list` and `search` actions with `TTY::Box.frame` to create clean, well-defined table headers and titles.",
          "llm_prompt": {
            "role": "SYSTEM",
            "instructions": "You are an expert Ruby developer. Your task is to refactor the display methods in the `blueprintsCLI` codebase to use `tty-box` for better visual structure.",
            "task_details": {
              "files_to_modify": [
                "lib/blueprintsCLI/actions/list.rb",
                "lib/blueprintsCLI/actions/search.rb"
              ],
              "goal": "In the `display_table` method of `list.rb` and `display_search_results` of `search.rb`, replace the manual header creation (e.g., `puts '=' * 120`) with a `TTY::Box.frame` that contains the table title.",
              "context_code_list": "def display_table(blueprints)\n  puts \"\\n\" + '=' * 120\n  printf \"%-5s %-30s %-50s %-25s\\n\", 'ID', 'Name', 'Description', 'Categories'\n  puts '=' * 120\n  # ... rest of the method\nend",
              "context_code_search": "def display_search_results(results)\n  puts \"\\n\" + '=' * 120\n  puts \"üîç Search Results for: '#{@query}'\".colorize(:blue)\n  puts '=' * 120\n  # ... rest of the method\nend",
              "instructions": [
                "1. In both specified methods, remove the lines that print `puts '=' * 120` and the manual `puts` for the title.",
                "2. Create a `TTY::Box.frame` to act as the header.",
                "3. The box's content should be the title, e.g., 'üìö Blueprint Collection' or `üîç Search Results for: '#{@query}'`.",
                "4. Use box options like `width: 120`, `align: :center` for consistent styling.",
                "5. Print the box, then print the `printf` line containing the column headers, followed by the table rows.",
                "6. Ensure the table data alignment remains correct."
              ],
              "desired_output_example": "The tables in the `list` and `search` commands should be preceded by a clean, boxed title instead of manually drawn lines."
            }
          }
        },
        {
          "id": "TASK-1.3",
          "title": "Refactor Confirmation Dialogs in Delete and Edit Actions",
          "description": "Enhance the visual impact and clarity of critical confirmation dialogs by wrapping them in styled `TTY::Box` frames.",
          "llm_prompt": {
            "role": "SYSTEM",
            "instructions": "You are an expert Ruby developer. Your task is to improve the safety and clarity of confirmation dialogs in the `blueprintsCLI` codebase using `tty-box`.",
            "task_details": {
              "files_to_modify": [
                "lib/blueprintsCLI/actions/delete.rb",
                "lib/blueprintsCLI/actions/edit.rb"
              ],
              "goal": "In the `confirm_deletion?` and `confirm_edit_operation` methods, wrap the warning messages and details in a `TTY::Box.frame` to make them more prominent.",
              "context_code_delete": "def confirm_deletion?(blueprint)\n  puts \"\\n#{'=' * 60}\"\n  puts 'üóëÔ∏è  Blueprint Deletion Confirmation'.colorize(:red)\n  puts '=' * 60\n  # ... details and warning\nend",
              "instructions": [
                "1. In `confirm_deletion?` in `delete.rb`, create a `TTY::Box` with a red border (`border: { fg: :red }`).",
                "2. The title of the box should be 'üóëÔ∏è Deletion Confirmation'.",
                "3. Place all the blueprint details and the 'WARNING: This action cannot be undone!' text inside the box content.",
                "4. In `confirm_edit_operation` in `edit.rb`, create a similar `TTY::Box` with a yellow border (`border: { fg: :yellow }`) and a title like 'üîÑ Edit Confirmation'.",
                "5. Place the details and the multi-line warning inside this box.",
                "6. The final `(y/N)` prompt should appear after the box is printed."
              ],
              "desired_output_example": "Critical confirmation prompts will be displayed inside eye-catching, color-coded boxes, reducing the risk of accidental user action."
            }
          }
        }
      ]
    },
    {
      "id": "EPIC-2",
      "title": "Workflow Improvement with TTY-Cursor",
      "description": "Transform the CLI from a scrolling log into a modern, application-like interface by implementing robust screen management using TTY-Cursor for clearing and controlling the terminal display.",
      "tasks": [
        {
          "id": "TASK-2.1",
          "title": "Implement a Screen-Clearing Loop in MenuCommand",
          "description": "Ensure a clean state for the user at the start of every interaction with the main menu by clearing the screen.",
          "llm_prompt": {
            "role": "SYSTEM",
            "instructions": "You are an expert Ruby developer tasked with improving the user workflow of a CLI application by implementing proper screen management with `tty-cursor`.",
            "task_details": {
              "file_to_modify": "lib/blueprintsCLI/commands/menu_command.rb",
              "goal": "Modify the `start` method's loop to clear the terminal screen at the beginning of each iteration, presenting the user with a fresh menu each time.",
              "context_code": "def start\n  loop do\n    choice = main_menu\n\n    # Debug logging\n    debug_log(\"Choice selected: #{choice.inspect} (#{choice.class})\")\n\n    case choice\n    # ... case logic\n    end\n  end\nend",
              "instructions": [
                "1. In the `start` method, at the very beginning of the `loop do` block, add a command to clear the entire terminal screen.",
                "2. Use `print TTY::Cursor.clear_screen` for this purpose.",
                "3. Ensure `tty-cursor` is required if it isn't already available in the context.",
                "4. No other logic within the loop should be changed."
              ],
              "desired_output_example": "When the application starts and after any command completes, the terminal will be cleared, and the main menu will be displayed at the top of the screen, free of any previous output."
            }
          }
        },
        {
          "id": "TASK-2.2",
          "title": "Add Screen Clearing After Command Execution",
          "description": "Create clean transitions between command outputs and the main menu by clearing the screen after a user acknowledges the output of a command.",
          "llm_prompt": {
            "role": "SYSTEM",
            "instructions": "You are an expert Ruby developer. Your task is to refine the interactive workflow of the `blueprintsCLI` by adding screen-clearing transitions.",
            "task_details": {
              "file_to_modify": "lib/blueprintsCLI/actions/list.rb",
              "goal": "In actions that have an interactive mode with a 'Press any key to continue...' prompt, clear the screen after the keypress to ensure a clean return to the main menu.",
              "context_code": "# In lib/blueprintsCLI/actions/list.rb, inside interactive_blueprint_browser\nwhen :summary\n  display_summary(blueprints)\n  prompt.keypress('Press any key to continue...')",
              "instructions": [
                "1. Locate all instances of `prompt.keypress('Press any key to continue...')` within the `lib/blueprintsCLI/actions/` directory, particularly in `list.rb`.",
                "2. Immediately after the `prompt.keypress` call, add a line to clear the screen: `print TTY::Cursor.clear_screen`.",
                "3. This will ensure that after the user views the output of an action (like `:view` or `:summary`) and presses a key, the screen is wiped clean before the `MenuCommand` loop redraws the main menu.",
                "4. Apply this pattern consistently wherever a pause-and-continue workflow exists in interactive mode."
              ],
              "desired_output_example": "After viewing blueprint details or a summary in interactive mode, pressing a key will clear the output and present a clean main menu, rather than showing the menu below the old content."
            }
          }
        }
      ]
    }
  ]
}
