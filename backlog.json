```json
{
  "backlog": [
    {
      "id": "TASK-001",
      "title": "Fix Command Injection Vulnerability in Edit Action",
      "description": "The `launch_editor` method in the `Edit` action uses an unsanitized system call with string interpolation, which creates a critical command injection vulnerability. This task is to replace the insecure call with a safe library designed for this purpose.",
      "category": "Security",
      "priority": "Critical",
      "files_to_modify": [
        "lib/blueprintsCLI/actions/edit.rb"
      ],
      "llm_prompt": {
        "role": "You are a senior Ruby developer tasked with fixing a critical security vulnerability in a command-line application. Your goal is to replace a dangerous `system` call with a secure alternative from the TTY toolkit.",
        "instructions": [
          "1. Open the file `lib/blueprintsCLI/actions/edit.rb`.",
          "2. Locate the `launch_editor` method.",
          "3. The current implementation uses `system(\"#{editor} #{temp_file}\")`. This is insecure.",
          "4. Add `require 'tty-editor'` to the top of the file if it's not already present.",
          "5. Replace the `system` call with `TTY::Editor.open(temp_file, command: editor)`. The `TTY::Editor.open` method handles launching the editor safely.",
          "6. The success of the operation can still be checked by the return value of `TTY::Editor.open`, so the surrounding logic can remain similar.",
          "7. Do not modify any other part of the file or its logic.",
          "8. Provide the complete, modified content of the `lib/blueprintsCLI/actions/edit.rb` file as your output."
        ]
      }
    },
    {
      "id": "TASK-002",
      "title": "Decouple AI Embedding Generation from Google Gemini",
      "description": "The `BlueprintDatabase` class is tightly coupled to the Google Gemini API for generating vector embeddings, using a direct `Net::HTTP` call. This bypasses the application's configurable `RubyLLM` framework, leading to architectural inconsistency. This task is to refactor the embedding generation to use the provider-agnostic `RubyLLM` library.",
      "category": "Refactoring",
      "priority": "High",
      "files_to_modify": [
        "lib/blueprintsCLI/database.rb"
      ],
      "llm_prompt": {
        "role": "You are a software architect tasked with decoupling a core service from a specific vendor API. You will modify the database interaction class to use a generic, configurable AI library instead of a hardcoded one.",
        "instructions": [
          "1. Open the file `lib/blueprintsCLI/database.rb`.",
          "2. Remove the private methods `generate_embedding` and `generate_embedding_for_text`, which contain the hardcoded `Net::HTTP` calls to the Google Gemini API.",
          "3. Remove the constants `EMBEDDING_MODEL` and `EMBEDDING_DIMENSIONS` as these will now be managed by the `RubyLLM` configuration.",
          "4. Modify the `create_blueprint` method. Replace the call to `generate_embedding` with a call to `RubyLLM.embed(text: content_to_embed)`. The `content_to_embed` should be the JSON representation of the blueprint's name and description, similar to the original implementation. Ensure you require `'ruby_llm'` and `require 'pgvector'` at the top of the file.",
          "5. Modify the `search_blueprints` method. Replace the call to `generate_embedding_for_text` with `RubyLLM.embed(text: query)`. The result should be encoded using `Pgvector.encode()` before being passed to the SQL query.",
          "6. Ensure the `update_blueprint` method is also updated to use `RubyLLM.embed` when regenerating embeddings.",
          "7. Provide the complete, modified content of the `lib/blueprintsCLI/database.rb` file as your output."
        ]
      }
    },
    {
      "id": "TASK-003",
      "title": "Expand RSpec Test Coverage for Core Actions",
      "description": "The current test suite has low coverage for the business-critical `Action` classes, which contain most of the application's logic. This task is to create new spec files for the `Submit` and `Search` actions to validate their behavior and improve the project's resilience to regressions.",
      "category": "Testing",
      "priority": "High",
      "files_to_modify": [
        "spec/actions/submit_action_spec.rb",
        "spec/actions/search_action_spec.rb"
      ],
      "llm_prompt": {
        "role": "You are a Ruby developer with expertise in RSpec. You will write comprehensive tests for existing application logic, ensuring edge cases and failure modes are covered.",
        "instructions": [
          "1. Based on the existing files in `spec/` and the code in `lib/blueprintsCLI/actions/submit.rb`, create a new test file at `spec/actions/submit_action_spec.rb`.",
          "2. In this new file, write RSpec tests for the `Submit` action. Cover the following scenarios:",
          "   - A successful submission with all metadata provided.",
          "   - A successful submission where the name, description, and categories are auto-generated (mock the `Generators`).",
          "   - A failed submission due to empty code.",
          "   - A failed submission because AI generation fails (mock the `Generators` to return nil).",
          "3. Next, based on the code in `lib/blueprintsCLI/actions/search.rb`, create another new test file at `spec/actions/search_action_spec.rb`.",
          "4. In this file, write RSpec tests for the `Search` action. Cover the following scenarios:",
          "   - A semantic search that returns results (mock the `BlueprintDatabase#search_blueprints` method).",
          "   - A search that returns no results.",
          "   - A text-based search (by setting `semantic: false`).",
          "5. Use the existing `spec_helper.rb` and `factories.rb` to set up test data. Use `allow_any_instance_of` to mock dependencies like the database or AI generators where appropriate.",
          "6. Provide the complete content for the two new spec files as your output, formatted as a JSON object with file paths as keys."
        ]
      }
    },
    {
      "id": "TASK-004",
      "title": "Refactor High-Complexity `interactive_blueprint_browser` Method",
      "description": "The `.rubocop_todo.yml` file indicates high complexity for several methods. The `interactive_blueprint_browser` method in the `List` action is a prime candidate for refactoring. It currently handles menu creation, display, and action routing, making it difficult to read and maintain. This task is to break it down into smaller, single-responsibility helper methods.",
      "category": "Technical Debt",
      "priority": "Medium",
      "files_to_modify": [
        "lib/blueprintsCLI/actions/list.rb"
      ],
      "llm_prompt": {
        "role": "You are a senior developer focused on improving code quality and maintainability. You will refactor a complex method into smaller, more manageable pieces without changing its external behavior.",
        "instructions": [
          "1. Open the file `lib/blueprintsCLI/actions/list.rb`.",
          "2. Locate the `interactive_blueprint_browser` method. This method is too long and does too many things.",
          "3. Create several new private helper methods to break down the logic. Suggestions for new methods include:",
          "   - `build_browser_choices(blueprints)`: This method should take the blueprints and prepare the array of choices for the TTY::Prompt, including the action items like 'Search' and 'Exit'.",
          "   - `handle_browser_selection(selected, blueprints)`: This method should contain the `case` statement that routes to different handlers based on the user's selection (`:view`, `:edit`, `:search`, etc.).",
          "   - `refresh_blueprint_list`: A small helper to reload the blueprints from the database after an action like 'submit'.",
          "4. Modify the main `interactive_blueprint_browser` loop to be a simple orchestration of calls to these new private methods.",
          "5. The public behavior of the interactive browser must remain exactly the same.",
          "6. Provide the complete, modified content of the `lib/blueprintsCLI/actions/list.rb` file as your output."
        ]
      }
    }
  ]
}
```
